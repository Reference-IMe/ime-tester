/*  
 * Copyright (c) 2013-2013 The University of Tennessee and The University                                                                          
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 *
 *
 * $COPYRIGHT$
 * 
 * Additional copyrights may follow
 * 
 * $HEADER$
 */

#include "ftla_ftwork.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <complex.h>

#include <mpi.h>

#include "slp.h"
extern MPI_Comm ftla_current_comm;

void Cftla_work_construct( int reentry, int *descA, int Mc, int Nc, ftla_work_t *ftw ) {
    int ctxt = descA[CTXT_];
    int nb=descA[NB_];
    int nprow, npcol, myrow, mycol;
    Cblacs_gridinfo( ctxt, &nprow, &npcol, &myrow, &mycol );
        
    if( reentry == 0 ) {
        ftw->errstep = 0;
        ftw->errproc = -1;
        ftw->errop = 0;
    }
    ftw->curop = 1;
    memcpy( ftw->descA, descA, 9*sizeof(int) );
    ftw->Nc = Nc;
    ftw->Mc = 0;

    ftw->comms.R = calloc(nb*nb, sizeof(double complex)); //overallocate for the largest possible size
    ftw->comms.S = calloc(nb*nb, sizeof(double complex));
    MPI_Comm_split(ftla_current_comm, myrow, mycol, &(ftw->comms.rowcomm));
    MPI_Comm_split(ftla_current_comm, mycol, myrow, &(ftw->comms.colcomm));
}
extern void ftla_work_construct_( int * reentry, int *descA, int *Mc, int *Nc, int *ftw ) {
    Cftla_work_construct( *reentry, descA, *Mc, *Nc, (ftla_work_t*)ftw );
}

void Cftla_work_destruct( ftla_work_t *ftw ) {
    ftw->Nc=-1;
    ftw->Mc=-1;
    free( ftw->comms.S );
    free( ftw->comms.R );
    MPI_Comm_free( &ftw->comms.rowcomm );
    MPI_Comm_free( &ftw->comms.colcomm );
}
extern void ftla_work_destruct_( int *ftw ) {
    Cftla_work_destruct( (ftla_work_t*)ftw );
}

extern int  Cftla_procfailed( ftla_work_t *ftw, int je ) {
    //int id;
//    printf( "T %d %d\n", ftw->errstep, ftw->step );
    if( ftw->curop <= ftw->errop ) {
        /* in replay, cannot have multiple errors yet */
        /*if( Cblacs_has_failure( ftw->descA[CTXT_], &id ) ) {
            Cblacs_abort( ftw->descA[CTXT_], id );
        }*/
        return 0;
    }
    //printf("*** ftw->errproc=%d ftw->errop=%d ftw->curop=%d\n",ftw->errproc,ftw->errop, ftw->curop);
    if( ftw->errproc!=-1 && ftw->errop==0 ) {
        
        
//    if( Cblacs_has_failure( ftw->descA[CTXT_], &id ) ) {
        ftw->errstep = je;
//        ftw->errproc = id;
        ftw->errop = ftw->curop;
        ftw->curop = 1;
        return 1;
    }
    else {
        ftw->curop++;
        return 0;
    }
}
extern int  ftla_procfailed_( int *ftwork, int *je ) {
    return Cftla_procfailed( (ftla_work_t*)ftwork, *je );
}

extern int  Cftla_replay( ftla_work_t *ftw ) {
//    printf( "P %d %d\n", ftw->errstep, ftw->step );
    if( ftw->curop > ftw->errop ) {
        return 0;
    }
    else {
        return ftw->curop++;
    }
}
extern int  ftla_replay_( int *ftwork ) {
    return Cftla_replay( (ftla_work_t*)ftwork );
}

extern int  Cftla_repairstep( ftla_work_t *ftw ) {
    if( ftw->errop==0 || ftw->curop<ftw->errop ) {
        return 0;
    }
    return ftw->errop;
}
extern int  ftla_repairstep_( int *ftwork ) {
    return Cftla_repairstep( (ftla_work_t*)ftwork );
}
