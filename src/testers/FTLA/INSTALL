 This is the readme file for FTLA: the Fault Tolerant Linear Algebra package. 

FTLA is an extension to ScaLAPACK that tolerates and recovers from failures. The interface is generally similar to Scalapack, but a number of new operations are added. 

FTLA supports the following operations: 
* QR factorization (protection against fail-stop failures, failure of at most 1 proc at a time, both Q and R factors protected)
* LU factorization (protection against fail-stop failures, failure of at most 1 proc at a time, both Q and R factors protected)


The current version of FTLA has different modes of operations, depending on the level of support your local MPI implementation features.
As of today, most MPI implementations do not support fault tolerance and recovery by default. Deploying fully fault tolerant FTLA will
require that you install special versions of BLACS and/or MPI. For testing purposes, the DEMO MODE of FTLA permits develloping 
FTLA applications, assessing their performance, correctness and numerical accuracy using only system pre-installed 
standard Scalapack and MPI distribution; this is the simplest mode to use and it is recommended to have it running before 
diving into the more advanced modes. 

* If your MPI implementation does not support fault tolerance (default on most systems), you can still use FTLA in DEMO MODE. 
    - edit Makefile
      + check that you are using the appropriate BLAS, BLACS and ScaLAPACK versions for your system. 
      + set the INJECT define
      + unset the COF define
      + use mpicc and mpifortran (or the local name on your system for these MPI wrappers)
    - type make
    - type (for example) mpirun -np 128 -x OMP_NUM_THREADS=1 ./testing_ftdqr.x -p 8 -q 16 -r 6000 54000 2000 -fe 0 4 1  -nb 100
      + -p and -q control the process grid
      + -r min max inc controls the matrix sizes that will be run
      + -fe min max inc controls the injection of failures
      + -nb controls the block size 
      + the output will look like 
        Setting up MPI and BLACS...done PxQ=8x16, NB=100
        M   Ne   : time(s)  gflops/proc (realflops) : |A-A~|    |B-AX~|     |X-X~|
        6000    6800    o: 1.174982 1.91492             : 2.421246e-19  3.334761e-01    2.619643e-12
                       0f: 1.580747 1.42338     1.61316     : 2.421608e-19  3.340012e-01    2.039959e-12
                         :            overhead% = 34.53         :             |Xo-Xf| = 5.915468e-13
        ### REPARING a failure at iteration 3001(QRF) process 17 (op 221>=220)
                       1f: 2.060669 1.09188     1.23746     : 3.208005e-19  3.617161e-01    1.236015e-12
                         :            overhead% = 75.38         :             |Xo-Xf| = 1.412462e-12
        ### REPARING a failure at iteration 2001(QRF) process 17 (op 151>=150)
        ### REPARING a failure at iteration 4001(QRF) process 18 (op 293>=293)
                       2f: 2.151197 1.04593     1.18539     : 3.485460e-19  3.672993e-01    1.252429e-12
             ...
    - you can edit operations to change failure injection site as you wish. Remember that this version supports only one failure (another failure during recovery is fatal). 

* If your MPI implementation does support MPI_ERR_RETURNS, you can use FTLA in Checkpoint on Failure mode (COF)
  - obtain the special BLACS distributed on the following Mercurial repository
    + hg co ssh://bitbucket/icldistcomp/ftla
  - edit Makefile
    + set the COF define
    + set (or not) the INJECT define
  - when restarting the program after a failure, use the -cof command line flag to force a cof restart
  - other Directions are same as above

* Last, you can install the special Fault Tolerant implementation of MPI following the ULFM draft specification and use it to support restartless fault tolerance (please note that this is the most difficult to install mode)
  - obtain the special MPI distributed on the following Mercurial repository
    + hg co ssh://bitbucket/icldistcomp/ulfm
   - obtain the special BLACS distributed on the following Mercurial repository
    + hg co ssh://bitbucket/icldistcomp/ftla
   - edit ftla_[sdcz]csum.c
    + uncomment the lines containing Cblacs_has_errors
    + comment the following if statement
   - in the main program 
    + When ftla_pdge**f returns with an error, MPI_Comm_revoke you copy of comm_world;
    + MPI_Comm_shrink, MPI_Comm_spawn, MPI_Intercomm_merge (see ULFM examples)
    + CBlacs_set(ctxt, BLACS_SYS_CTXT, merged_comm)
    + re-invoke ftla_pdge**f

