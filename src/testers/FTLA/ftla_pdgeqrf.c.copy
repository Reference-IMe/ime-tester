/*  
 * Copyright (c) 2011-2013 The University of Tennessee and The University                                                                          
 *                         of Tennessee Research Foundation.  All rights
 *                         reserved.
 *
 *
 * $COPYRIGHT$
 * 
 * Additional copyrights may follow
 * 
 * $HEADER$
 */

/* 
 * @generated d Sun Nov 17 06:50:31 2013
 */

/* pdgeqrf.f -- translated by f2c (version 20061008).
   You must link the resulting object file with libf2c:
    on Microsoft Windows system, link with libf2c.lib;
    on Linux or Unix systems, link with .../path/to/libf2c.a -lm
    or, if you install libf2c.a in a standard place, with -lf2c -lm
    -- in that order, at the end of the command line, as in
        cc *.o -lf2c -lm
    Source for libf2c is in /netlib/f2c/libf2c.zip, e.g.,

        http://www.netlib.org/f2c/libf2c.zip
*/

#include <stdio.h>
#include <stdlib.h>
#include "f2c.h"
#include "ftla_csum.h"
#include "util_matrix.h"
#include "util_inject.h"
#include "slp.h"

#ifdef INJECT
extern int *errors;
#endif

extern int numroc_(int * N, int * NB, int * IPROC, int * ISRCPROC, int * NPROCS );
extern void descset_ (int * desc, int *M, int *N, int *mb, int *nb, int *irsrc, int *icsrc, int *ictxt, int *lld);

extern int ftla_pdlarfb(char *side, char *trans, char *direct, char *
    storev, int *m, int *n, int *k, double *v, int *
    iv, int *jv, int *descv, double *t, double *c__, 
    int *ic, int *jc, int *descc, double *work, ftnlen 
    side_len, ftnlen trans_len, ftnlen direct_len, ftnlen storev_len, ftla_work_t *ftw );

static void qpanel_replay( double *A, int MA, int NA, int *descA, ftla_work_t *ftw );


/* Table of constant values */

static int c__1 = 1;
static int c__2 = 2;
static int c__6 = 6;


/* Subroutine */ int ftla_pdgeqrf(int *m, int *n, double *a, int *
    ia, int *ja, int *descA, double *tau, double *work, 
    int *lwork, int *info, ftla_work_t *ftw )
{
    /* System generated locals */
    int i__1, i__2, i__3, i__4, i__5;

    /* Local variables */
    static int i__, j, k;
    extern /* Subroutine */ int pb_topget_(int *, char *, char *, char *,
         ftnlen, ftnlen, ftnlen), pb_topset_(int *, char *, char *, 
        char *, ftnlen, ftnlen, ftnlen);
    static int jb, jn, mp0, nq0, ipw, idum1[1], idum2[1];
    extern int iceil_(int *, int *);
    static int icoff, iacol, iinfo, npcol, iarow, mycol, lwmin, ictxt, 
        nprow, myrow;
    extern /* Subroutine */ int blacs_gridinfo_(int *, int *, 
        int *, int *, int *);
    extern int numroc_(int *, int *, int *, int *, 
        int *);
    static logical lquery;
    extern /* Subroutine */ int chk1mat_(int *, int *, int *, 
        int *, int *, int *, int *, int *, int *),
         pdgeqr2_(int *, int *, double *, int *, int *
        , int *, double *, double *, int *, int *);
    extern int indxg2p_(int *, int *, int *, int *, 
        int *);
    extern /* Subroutine */ int pdlarfb_(char *, char *, char *, char *, 
        int *, int *, int *, double *, int *, int 
        *, int *, double *, double *, int *, int *, 
        int *, double *, ftnlen, ftnlen, ftnlen, ftnlen), 
        pdlarft_(char *, char *, int *, int *, double *, 
        int *, int *, int *, double *, double *, 
        double *, ftnlen, ftnlen), pxerbla_(int *, char *, 
        int *, ftnlen);
    static char colbtop[1], rowbtop[1];
    extern /* Subroutine */ int pchk1mat_(int *, int *, int *, 
        int *, int *, int *, int *, int *, int *, 
        int *, int *, int *);


/*  -- ScaLAPACK routine (version 1.7) -- */
/*     University of Tennessee, Knoxville, Oak Ridge National Laboratory, */
/*     and University of California, Berkeley. */
/*     May 25, 2001 */

/*     .. Scalar Arguments .. */
/*     .. */
/*     .. Array Arguments .. */
/*     .. */

/*  Purpose */
/*  ======= */

/*  PDGEQRF computes a QR factorization of a real distributed M-by-N */
/*  matrix sub( A ) = A(IA:IA+M-1,JA:JA+N-1) = Q * R. */

/*  Notes */
/*  ===== */

/*  Each global data object is described by an associated description */
/*  vector.  This vector stores the information required to establish */
/*  the mapping between an object element and its corresponding process */
/*  and memory location. */

/*  Let A be a generic term for any 2D block cyclicly distributed array. */
/*  Such a global array has an associated description vector DESCA. */
/*  In the following comments, the character _ should be read as */
/*  "of the global array". */

/*  NOTATION        STORED IN      EXPLANATION */
/*  --------------- -------------- -------------------------------------- */
/*  DTYPE_A(global) DESCA( DTYPE_ )The descriptor type.  In this case, */
/*                                 DTYPE_A = 1. */
/*  CTXT_A (global) DESCA( CTXT_ ) The BLACS context handle, indicating */
/*                                 the BLACS process grid A is distribu- */
/*                                 ted over. The context itself is glo- */
/*                                 bal, but the handle (the int */
/*                                 value) may vary. */
/*  M_A    (global) DESCA( M_ )    The number of rows in the global */
/*                                 array A. */
/*  N_A    (global) DESCA( N_ )    The number of columns in the global */
/*                                 array A. */
/*  MB_A   (global) DESCA( MB_ )   The blocking factor used to distribute */
/*                                 the rows of the array. */
/*  NB_A   (global) DESCA( NB_ )   The blocking factor used to distribute */
/*                                 the columns of the array. */
/*  RSRC_A (global) DESCA( RSRC_ ) The process row over which the first */
/*                                 row of the array A is distributed. */
/*  CSRC_A (global) DESCA( CSRC_ ) The process column over which the */
/*                                 first column of the array A is */
/*                                 distributed. */
/*  LLD_A  (local)  DESCA( LLD_ )  The leading dimension of the local */
/*                                 array.  LLD_A >= MAX(1,LOCr(M_A)). */

/*  Let K be the number of rows or columns of a distributed matrix, */
/*  and assume that its process grid has dimension p x q. */
/*  LOCr( K ) denotes the number of elements of K that a process */
/*  would receive if K were distributed over the p processes of its */
/*  process column. */
/*  Similarly, LOCc( K ) denotes the number of elements of K that a */
/*  process would receive if K were distributed over the q processes of */
/*  its process row. */
/*  The values of LOCr() and LOCc() may be determined via a call to the */
/*  ScaLAPACK tool function, NUMROC: */
/*          LOCr( M ) = NUMROC( M, MB_A, MYROW, RSRC_A, NPROW ), */
/*          LOCc( N ) = NUMROC( N, NB_A, MYCOL, CSRC_A, NPCOL ). */
/*  An upper bound for these quantities may be computed by: */
/*          LOCr( M ) <= ceil( ceil(M/MB_A)/NPROW )*MB_A */
/*          LOCc( N ) <= ceil( ceil(N/NB_A)/NPCOL )*NB_A */

/*  Arguments */
/*  ========= */

/*  M       (global input) INTEGER */
/*          The number of rows to be operated on, i.e. the number of rows */
/*          of the distributed submatrix sub( A ). M >= 0. */

/*  N       (global input) INTEGER */
/*          The number of columns to be operated on, i.e. the number of */
/*          columns of the distributed submatrix sub( A ). N >= 0. */

/*  A       (local input/local output) DOUBLE PRECISION pointer into the */
/*          local memory to an array of dimension (LLD_A, LOCc(JA+N-1)). */
/*          On entry, the local pieces of the M-by-N distributed matrix */
/*          sub( A ) which is to be factored.  On exit, the elements on */
/*          and above the diagonal of sub( A ) contain the min(M,N) by N */
/*          upper trapezoidal matrix R (R is upper triangular if M >= N); */
/*          the elements below the diagonal, with the array TAU, */
/*          represent the orthogonal matrix Q as a product of elementary */
/*          reflectors (see Further Details). */

/*  IA      (global input) INTEGER */
/*          The row index in the global array A indicating the first */
/*          row of sub( A ). */

/*  JA      (global input) INTEGER */
/*          The column index in the global array A indicating the */
/*          first column of sub( A ). */

/*  DESCA   (global and local input) INTEGER array of dimension DLEN_. */
/*          The array descriptor for the distributed matrix A. */

/*  TAU     (local output) DOUBLE PRECISION array, dimension */
/*          LOCc(JA+MIN(M,N)-1). This array contains the scalar factors */
/*          TAU of the elementary reflectors. TAU is tied to the */
/*          distributed matrix A. */

/*  WORK    (local workspace/local output) DOUBLE PRECISION array, */
/*                                                     dimension (LWORK) */
/*          On exit, WORK(1) returns the minimal and optimal LWORK. */

/*  LWORK   (local or global input) INTEGER */
/*          The dimension of the array WORK. */
/*          LWORK is local input and must be at least */
/*          LWORK >= NB_A * ( Mp0 + Nq0 + NB_A ), where */

/*          IROFF = MOD( IA-1, MB_A ), ICOFF = MOD( JA-1, NB_A ), */
/*          IAROW = INDXG2P( IA, MB_A, MYROW, RSRC_A, NPROW ), */
/*          IACOL = INDXG2P( JA, NB_A, MYCOL, CSRC_A, NPCOL ), */
/*          Mp0   = NUMROC( M+IROFF, MB_A, MYROW, IAROW, NPROW ), */
/*          Nq0   = NUMROC( N+ICOFF, NB_A, MYCOL, IACOL, NPCOL ), */

/*          and NUMROC, INDXG2P are ScaLAPACK tool functions; */
/*          MYROW, MYCOL, NPROW and NPCOL can be determined by calling */
/*          the subroutine BLACS_GRIDINFO. */

/*          If LWORK = -1, then LWORK is global input and a workspace */
/*          query is assumed; the routine only calculates the minimum */
/*          and optimal size for all work arrays. Each of these */
/*          values is returned in the first entry of the corresponding */
/*          work array, and no error message is issued by PXERBLA. */

/*  INFO    (global output) INTEGER */
/*          = 0:  successful exit */
/*          < 0:  If the i-th argument is an array and the j-entry had */
/*                an illegal value, then INFO = -(i*100+j), if the i-th */
/*                argument is a scalar and had an illegal value, then */
/*                INFO = -i. */

/*  Further Details */
/*  =============== */

/*  The matrix Q is represented as a product of elementary reflectors */

/*     Q = H(ja) H(ja+1) . . . H(ja+k-1), where k = min(m,n). */

/*  Each H(i) has the form */

/*     H(j) = I - tau * v * v' */

/*  where tau is a real scalar, and v is a real vector with v(1:i-1) = 0 */
/*  and v(i) = 1; v(i+1:m) is stored on exit in A(ia+i:ia+m-1,ja+i-1), */
/*  and tau in TAU(ja+i-1). */

/*  ===================================================================== */

/*     .. Parameters .. */
/*     .. */
/*     .. Local Scalars .. */
/*     .. */
/*     .. Local Arrays .. */
/*     .. */
/*     .. External Subroutines .. */
/*     .. */
/*     .. External Functions .. */
/*     .. */
/*     .. Intrinsic Functions .. */
/*     .. */
/*     .. Executable Statements .. */

/*     Get grid parameters */

    /* Parameter adjustments */
    --work;
    --tau;
    --descA;
    --a;

    /* Function Body */
    ictxt = descA[2];
    blacs_gridinfo_(&ictxt, &nprow, &npcol, &myrow, &mycol);

/*     Test the input parameters */

    *info = 0;
    if (nprow == -1) {
    *info = -602;
    } else {
    chk1mat_(m, &c__1, n, &c__2, ia, ja, &descA[1], &c__6, info);
    if (*info == 0) {
        icoff = (*ja - 1) % descA[6];
        iarow = indxg2p_(ia, &descA[5], &myrow, &descA[7], &nprow);
        iacol = indxg2p_(ja, &descA[6], &mycol, &descA[8], &npcol);
        i__1 = *m + (*ia - 1) % descA[5];
        mp0 = numroc_(&i__1, &descA[5], &myrow, &iarow, &nprow);
        i__1 = *n + icoff;
        nq0 = numroc_(&i__1, &descA[6], &mycol, &iacol, &npcol);
        lwmin = descA[6] * (mp0 + nq0 + descA[6]);

        if ( *ja > ftw->errstep )
            work[1] = (double) lwmin;

        lquery = *lwork == -1;
        if (*lwork < lwmin && ! lquery) {
        *info = -9;
        }
    }
    if (*lwork == -1) {
        idum1[0] = -1;
    } else {
        idum1[0] = 1;
    }
    idum2[0] = 9;
    pchk1mat_(m, &c__1, n, &c__2, ia, ja, &descA[1], &c__6, &c__1, idum1, 
        idum2, info);
    }

    if (*info != 0) {
    i__1 = -(*info);
    pxerbla_(&ictxt, "FTPDGEQRF", &i__1, (ftnlen)9);
    return 0;
    } else if (lquery) {
    return 0;
    }

/*     Quick return if possible */

    if (*m == 0 || *n == 0) {
    return 0;
    }

    k = min(*m,*n);
    ipw = descA[6] * descA[6] + 1;
    pb_topget_(&ictxt, "Broadcast", "Rowwise", rowbtop, (ftnlen)9, (ftnlen)7,
         (ftnlen)1);
    pb_topget_(&ictxt, "Broadcast", "Columnwise", colbtop, (ftnlen)9, (
        ftnlen)10, (ftnlen)1);
    pb_topset_(&ictxt, "Broadcast", "Rowwise", "I-ring", (ftnlen)9, (ftnlen)
        7, (ftnlen)6);
    pb_topset_(&ictxt, "Broadcast", "Columnwise", " ", (ftnlen)9, (ftnlen)10,
         (ftnlen)1);
    
    /*       
     *       Initial Checksum of [A] -> [A, C, C]
     *                      [R      ]    <--- both uninitialized 
     *                      [R      ] <--+
     */
    int realn = *n-(ftw->Nc);
    int N_1 = realn+1;
    int mn = min(*m,*n);
    int err=0;

    if ( !Cftla_replay( ftw ) ) {
        Cftla_pdcsum ('r', &a[1], *m, realn, *ia, *ja, &descA[1], &a[1], 1, N_1, &descA[1], ftw );
        if( Cftla_procfailed( ftw, *ja ) ) return -1;
    }

/*     Handle the first block of columns separately */

/* Computing MIN */
    i__1 = iceil_(ja, &descA[6]) * descA[6], i__2 = *ja + k - 1;
    jn = min(i__1,i__2);
    jb = jn - *ja + 1;
    
/*     Compute the QR factorization of the first block A(ia:ia+m-1,ja:jn) */

    if ( !Cftla_replay( ftw ) ) {
        Cftla_pdqplcpy (&a[1], &descA[1], 1, 1, ftw ); /* make a local copy & checkpoint localcopy */
        pdgeqr2_(m, &jb, &a[1], ia, ja, &descA[1], &tau[1], &work[1], lwork, &iinfo);
        if( Cftla_procfailed( ftw, *ja ) ) return -1;
    }

    if (*ja + jb <= *ja + realn - 1) 
    {

        /*        Form the triangular factor of the block reflector */
        /*        H = H(ja) H(ja+1) . . . H(jn) */
        
        if ( !Cftla_replay( ftw ) ) {
            pdlarft_("Forward", "Columnwise", m, &jb, &a[1], ia, ja, &descA[1], &
                    tau[1], &work[1], &work[ipw], (ftnlen)7, (ftnlen)10);
            if( Cftla_procfailed( ftw, *ja ) ) return -1;
        }

        /*        Apply H' to A(ia:ia+m-1,ja+jb:ja+n-1) from the left */

        i__1 = *n - jb;
        i__2 = *ja + jb;

        err = ftla_pdlarfb("Left", "Transpose", "Forward", "Columnwise", m, &i__1, &jb, 
                &a[1], ia, ja, &descA[1], &work[1], &a[1], ia, &i__2, &descA[1], 
                &work[ipw], (ftnlen)4, (ftnlen)9, (ftnlen)7, (ftnlen)10, ftw );
        if( err == -1 ) return -1;
        
        if ( Cftla_repairstep( ftw ) ) {
        	//fprintf(stderr, "### REPARING a failure at iteration %d(QRF) process %d (op %d,%d)\n", *ja, ftw->errproc, ftw->curop, ftw->errop);
            // changed output to standard output
        	printf("### REPARING a failure at iteration %d(QRF) process %d (op %d,%d)\n", *ja, ftw->errproc, ftw->curop, ftw->errop);
            Cftla_pdcsumr ('A', &a[1], *m, realn,
                    &descA[1], ftw );
            qpanel_replay(&a[1], *m, *n, &descA[1], ftw);
            if( Cftla_procfailed( ftw, *ja ) ) return -1;
        }
    }

/*     Loop over the remaining blocks of columns */

    i__1 = *ja + k - 1;
    i__2 = descA[6];
    
    int jj = 1; 
    int dec = 0;
    int jc=1;
    for (j = jn + 1; i__2 < 0 ? j >= i__1 : j <= i__1; j += i__2, jj++) 
    {
        if (jj%(npcol)==0)
        {
            if ( !Cftla_replay( ftw ) ) {
                Cftla_pdqplcpy (&a[1], &descA[1], j, j, ftw );
                if( Cftla_procfailed( ftw, j ) ) return -1;
            }
            jc=j;
        }

        /* Computing MIN */
        i__3 = k - j + *ja;
        jb = min(i__3,descA[6]);
        i__ = *ia + j - *ja;

        /*        Compute the QR factorization of the current block */
        /*        A(i:ia+m-1,j:j+jb-1) */

        i__3 = *m - j + *ja;
        if ( !Cftla_replay( ftw ) ) {
            pdgeqr2_(&i__3, &jb, &a[1], &i__, &j, &descA[1], &tau[1], &work[1], 
                    lwork, &iinfo);
            dprintsmatrix(i__3, jb, &a[1], i__, j, &descA[1], "QR2f", 4);
            if( Cftla_procfailed( ftw, j ) ) return -1;
        }

#if 0
#ifdef INJECT
        if( -1 == dinject_errors(errors, j, &a[1], &descA[1], ftw ) ) {
            return -1;
        }
#endif
#endif /* 0 */


        /* 
         *  Checkpointing L          
         */
        if (((jj+1)%(npcol))==0 || j+i__2>realn) // TODO: check boundary condition (doing extra ckpt at end?)
        {
            /*
            if (mycol+myrow==0)
                printf ("j=%d, n=%d, jx=%d\n", j, mn-j+*ja+2*jb, j-(npcol-1)*jb);
                */
            if ( !Cftla_replay( ftw ) ) {
                Cftla_pdcsum ('d', &a[1], mn-j+*ja+2*jb, realn, jc, jc, &descA[1], &a[1], *m+1, j, &descA[1], ftw );
                if( Cftla_procfailed( ftw, j ) ) return -1;
            }
        }

        dec += ((*n != realn) && (((jj+1)%(npcol))==0 || j+i__2>realn))?(jb*2):0;
        if (j + jb <= *ja + realn - 1) 
        {

            /*           Form the triangular factor of the block reflector */
            /*           H = H(j) H(j+1) . . . H(j+jb-1) */

            i__3 = *m - j + *ja;
            
            if ( !Cftla_replay( ftw ) ) {
                pdlarft_("Forward", "Columnwise", &i__3, &jb, &a[1], &i__, &j, &
                        descA[1], &tau[1], &work[1], &work[ipw], (ftnlen)7, (
                            ftnlen)10);
                if( Cftla_procfailed( ftw, j ) ) return -1;
            }

            /*           Apply H' to A(i:ia+m-1,j+jb:ja+n-1) from the left */

            i__3 = *m - j + *ja;
            i__4 = *n - j - jb + *ja - dec;
            i__5 = j + jb;

            err = ftla_pdlarfb("Left", "Transpose", "Forward", "Columnwise", &i__3, 
                    &i__4, &jb, &a[1], &i__, &j, &descA[1], &work[1], &a[1], 
                    &i__, &i__5, &descA[1], &work[ipw], (ftnlen)4, (ftnlen)9, (ftnlen)7, 
                    (ftnlen)10, ftw );
            if( err == -1 ) return -1;
        }

        /*
         * now that pdlarfb is done, see if we need to Recover 
         */
        if ( Cftla_repairstep( ftw ) ) {
        	//if(mycol+myrow==0) fprintf(stderr, "### REPARING a failure at iteration %d(QRF) process %d (op %d>=%d)\n", j, ftw->errproc, ftw->curop, ftw->errop);
        	// changed to standard output
            if(mycol+myrow==0) printf("### REPARING a failure at iteration %d(QRF) process %d (op %d>=%d)\n", j, ftw->errproc, ftw->curop, ftw->errop);
            Cftla_pdcsumr ('A', &a[1], *m, realn,
                    &descA[1], ftw );
            qpanel_replay(&a[1], *m, *n, &descA[1], ftw);
            //printf("After: Cftla_repairstep( ftw )=%d Cftla_procfailed( ftw, j )=%d\n", Cftla_repairstep( ftw ), Cftla_procfailed( ftw, j ));
            if( Cftla_procfailed( ftw, j ) ) return -1;
        }

        /* L10: */
    }

#ifdef VERIFY_CHK
    double resid = Cftla_pfcsumv (*m, *n, &a[1], &descA[1], ftw );
    if( myrow+mycol==0 ) printf("Csum residual: %g", resid );
#endif

    pb_topset_(&ictxt, "Broadcast", "Rowwise", rowbtop, (ftnlen)9, (ftnlen)7,
         (ftnlen)1);
    pb_topset_(&ictxt, "Broadcast", "Columnwise", colbtop, (ftnlen)9, (
        ftnlen)10, (ftnlen)1);

    work[1] = (double) lwmin;

    return 0;

/*     End of PDGEQRF */

} /* pdgeqrf_ */


/*
 * reexecute the broken panel factorizations in the Q-wide section
 */
static int pdgeqrf0( int *m, int *n, double *a, int *ia, int *ja, int *descA, 
                    double *tau, double *work, int *lwork, int *info, 
                    ftla_work_t *ftw );
static void qpanel_replay( double *A, int MA, int NA, int *descA, ftla_work_t *ftw )
{
    extern /* Subroutine */ void Cblacs_gridinfo(int, int *, 
        int *, int *, int *);
    int ctxt = descA[1];
    int nb = descA[5];
    int nprow, npcol, myrow, mycol;
    Cblacs_gridinfo( ctxt, &nprow, &npcol, &myrow, &mycol );

    // roll back to the start status of this Q-panel factorization
    int jj = ftw->errstep - (ftw->errstep-1)%(npcol*nb);
    
    //if (myrow+mycol==0)
    //    printf ("resetting panel starting (%d,%d)\n", jj, jj);
    Cftla_pdqplrst( A, descA, jj, jj, ftw );

    // re-factorize  
    int MM = MA-jj+1;
    int NN = npcol*nb; 
    //if( myrow+mycol==0 )
    //    fprintf (stderr, "re-factorizing panels starting (%d,%d) to (%d,%d) of size %d x %d\n", jj, jj, ftw->errstep, ftw->errstep, MM, NN);
        
    int info;
    int lwork = -1;
    double lazywork;
    pdgeqrf0 (&MM, &NN, A, &jj, &jj, descA, NULL, &lazywork, &lwork, &info, ftw );
    lwork = (int)lazywork;
    double *work = malloc(lwork*sizeof(*work));
    double *tau = malloc(NA*sizeof(*tau));
    pdgeqrf0 (&MM, &NN, A, &jj, &jj, descA, tau, work, &lwork, &info, ftw );
    free (tau);
    free (work);
    ftw->errstep = 0;
    ftw->errproc = -1;
    ftw->errop = 0;
}

/* Subroutine */ static int pdgeqrf0(int *m, int *n, double *a, int *
    ia, int *ja, int *descA, double *tau, double *work, 
    int *lwork, int *info, ftla_work_t *ftw)
{
    /* System generated locals */
    int i__1, i__2, i__3, i__4, i__5;

    /* Local variables */
    static int i__, j, k;
    extern /* Subroutine */ int pb_topget_(int *, char *, char *, char *,
         ftnlen, ftnlen, ftnlen), pb_topset_(int *, char *, char *, 
        char *, ftnlen, ftnlen, ftnlen);
    static int jb, jn, mp0, nq0, ipw, idum1[1], idum2[1];
    extern int iceil_(int *, int *);
    static int icoff, iacol, iinfo, npcol, iarow, mycol, lwmin, ictxt, 
        nprow, myrow;
    extern /* Subroutine */ int blacs_gridinfo_(int *, int *, 
        int *, int *, int *);
    extern int numroc_(int *, int *, int *, int *, 
        int *);
    static logical lquery;
    extern /* Subroutine */ int chk1mat_(int *, int *, int *, 
        int *, int *, int *, int *, int *, int *),
         pdgeqr2_(int *, int *, double *, int *, int *
        , int *, double *, double *, int *, int *);
    extern int indxg2p_(int *, int *, int *, int *, 
        int *);
    extern /* Subroutine */ int pdlarfb_(char *, char *, char *, char *, 
        int *, int *, int *, double *, int *, int 
        *, int *, double *, double *, int *, int *, 
        int *, double *, ftnlen, ftnlen, ftnlen, ftnlen), 
        pdlarft_(char *, char *, int *, int *, double *, 
        int *, int *, int *, double *, double *, 
        double *, ftnlen, ftnlen), pxerbla_(int *, char *, 
        int *, ftnlen);
    static char colbtop[1], rowbtop[1];
    extern /* Subroutine */ int pchk1mat_(int *, int *, int *, 
        int *, int *, int *, int *, int *, int *, 
        int *, int *, int *);

/*     .. Parameters .. */
/*     .. */
/*     .. Local Scalars .. */
/*     .. */
/*     .. Local Arrays .. */
/*     .. */
/*     .. External Subroutines .. */
/*     .. */
/*     .. External Functions .. */
/*     .. */
/*     .. Intrinsic Functions .. */
/*     .. */
/*     .. Executable Statements .. */

/*     Get grid parameters */

    /* Parameter adjustments */
    --work;
    --tau;
    --descA;
    --a;

    /* Function Body */
    ictxt = descA[2];
    blacs_gridinfo_(&ictxt, &nprow, &npcol, &myrow, &mycol);

/*     Test the input parameters */

    *info = 0;
    if (nprow == -1) {
    *info = -602;
    } else {
    chk1mat_(m, &c__1, n, &c__2, ia, ja, &descA[1], &c__6, info);
    if (*info == 0) {
        icoff = (*ja - 1) % descA[6];
        iarow = indxg2p_(ia, &descA[5], &myrow, &descA[7], &nprow);
        iacol = indxg2p_(ja, &descA[6], &mycol, &descA[8], &npcol);
        i__1 = *m + (*ia - 1) % descA[5];
        mp0 = numroc_(&i__1, &descA[5], &myrow, &iarow, &nprow);
        i__1 = *n + icoff;
        nq0 = numroc_(&i__1, &descA[6], &mycol, &iacol, &npcol);
        lwmin = descA[6] * (mp0 + nq0 + descA[6]);

        work[1] = (double) lwmin;
        lquery = *lwork == -1;
        if (*lwork < lwmin && ! lquery) {
        *info = -9;
        }
    }
    if (*lwork == -1) {
        idum1[0] = -1;
    } else {
        idum1[0] = 1;
    }
    idum2[0] = 9;
    pchk1mat_(m, &c__1, n, &c__2, ia, ja, &descA[1], &c__6, &c__1, idum1, 
        idum2, info);
    }

    if (*info != 0) {
    i__1 = -(*info);
    pxerbla_(&ictxt, "PDGEQRF0", &i__1, (ftnlen)8);
    return 0;
    } else if (lquery) {
    return 0;
    }

/*     Quick return if possible */

    if (*m == 0 || *n == 0) {
    return 0;
    }

    k = min(*m,*n);
    ipw = descA[6] * descA[6] + 1;
    pb_topget_(&ictxt, "Broadcast", "Rowwise", rowbtop, (ftnlen)9, (ftnlen)7,
         (ftnlen)1);
    pb_topget_(&ictxt, "Broadcast", "Columnwise", colbtop, (ftnlen)9, (
        ftnlen)10, (ftnlen)1);
    pb_topset_(&ictxt, "Broadcast", "Rowwise", "I-ring", (ftnlen)9, (ftnlen)
        7, (ftnlen)6);
    pb_topset_(&ictxt, "Broadcast", "Columnwise", " ", (ftnlen)9, (ftnlen)10,
         (ftnlen)1);
    
    /*       
     *       Initial Checksum of [A] -> [A, C, C]
     *                      [R      ]    <--- both uninitialized 
     *                      [R      ] <--+
     */

/*     Handle the first block of columns separately */

/* Computing MIN */
    i__1 = iceil_(ja, &descA[6]) * descA[6], i__2 = *ja + k - 1;
    jn = min(i__1,i__2);
    jb = jn - *ja + 1;
    
/*     Compute the QR factorization of the first block A(ia:ia+m-1,ja:jn) */

    pdgeqr2_(m, &jb, &a[1], ia, ja, &descA[1], &tau[1], &work[1], lwork, &iinfo);

    if (*ja + jb <= *ja + *n - 1) {

/*        Form the triangular factor of the block reflector */
/*        H = H(ja) H(ja+1) . . . H(jn) */

    pdlarft_("Forward", "Columnwise", m, &jb, &a[1], ia, ja, &descA[1], &
        tau[1], &work[1], &work[ipw], (ftnlen)7, (ftnlen)10);

/*        Apply H' to A(ia:ia+m-1,ja+jb:ja+n-1) from the left */

    i__1 = *n - jb;
    i__2 = *ja + jb;
    pdlarfb_("Left", "Transpose", "Forward", "Columnwise", m, &i__1, &jb, 
        &a[1], ia, ja, &descA[1], &work[1], &a[1], ia, &i__2, &descA[
        1], &work[ipw], (ftnlen)4, (ftnlen)9, (ftnlen)7, (ftnlen)10);
    }

/*     Loop over the remaining blocks of columns */

    i__1 = *ja + k - 1;
    i__2 = descA[6];
    
    int jj = 1; 
    for (j = jn + 1; i__2 < 0 ? j >= i__1 : j <= i__1; j += i__2, jj++) 
    {
        if (j>ftw->errstep)
            break;

        /* Computing MIN */
        i__3 = k - j + *ja;
        jb = min(i__3,descA[6]);
        i__ = *ia + j - *ja;

        /*        Compute the QR factorization of the current block */
        /*        A(i:ia+m-1,j:j+jb-1) */

        i__3 = *m - j + *ja;
        pdgeqr2_(&i__3, &jb, &a[1], &i__, &j, &descA[1], &tau[1], &work[1], 
                lwork, &iinfo);

        if (j + jb <= *ja + *n - 1) 
        {

            /*           Form the triangular factor of the block reflector */
            /*           H = H(j) H(j+1) . . . H(j+jb-1) */

            i__3 = *m - j + *ja;
            pdlarft_("Forward", "Columnwise", &i__3, &jb, &a[1], &i__, &j, &
                    descA[1], &tau[1], &work[1], &work[ipw], (ftnlen)7, (
                        ftnlen)10);

            /*           Apply H' to A(i:ia+m-1,j+jb:ja+n-1) from the left */

            i__3 = *m - j + *ja;
            i__4 = *n - j - jb + *ja;
            i__5 = j + jb;
            pdlarfb_("Left", "Transpose", "Forward", "Columnwise", &i__3, 
                    &i__4, &jb, &a[1], &i__, &j, &descA[1], &work[1], &a[1], 
                    &i__, &i__5, &descA[1], &work[ipw], (ftnlen)4, (ftnlen)9, (
                        ftnlen)7, (ftnlen)10);
        }
        
        /* L10: */
    }

    pb_topset_(&ictxt, "Broadcast", "Rowwise", rowbtop, (ftnlen)9, (ftnlen)7,
         (ftnlen)1);
    pb_topset_(&ictxt, "Broadcast", "Columnwise", colbtop, (ftnlen)9, (
        ftnlen)10, (ftnlen)1);

    work[1] = (double) lwmin;

    return 0;

/*     End of PDGEQRF0 */

} /* pdgeqrf0_ */





